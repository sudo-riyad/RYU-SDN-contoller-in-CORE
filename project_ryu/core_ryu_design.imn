node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth4
	 ip address 10.0.13.1/24
	!
	interface eth3
	 ip address 10.0.11.1/24
	!
	interface eth2
	 ip address 10.0.10.1/24
	!
	interface eth1
	 ip address 10.0.1.1/24
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {264.97662744138415 272.2163262435488}
    labelcoords {261.97662744138415 257.21632624354925}
    interface-peer {eth0 n10}
    interface-peer {eth1 n7}
    interface-peer {eth2 n2}
    interface-peer {eth3 n3}
    interface-peer {eth4 n6}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s1 -- set Bridge s1 fail-mode=secure
	
	ovs-vsctl set bridge s1 other-config:datapath-id=0000000000000001
	ovs-vsctl set bridge s1 stp_enable=true
	
	ip addr del 10.0.1.1 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s1 eth1 up
	
	ip addr del 10.0.10.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s1 eth2 up
	ip addr del 10.0.11.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s1 eth3 up
	ip addr del 10.0.13.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s1 eth4 -- set Interface eth4 ofport_request=4
	ovs-ofctl mod-port s1 eth4 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s1 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s1 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth5
	 ip address 10.0.15.1/24
	!
	interface eth4
	 ip address 10.0.14.1/24
	!
	interface eth3
	 ip address 10.0.12.2/24
	!
	interface eth2
	 ip address 10.0.10.2/24
	!
	interface eth1
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ip address 10.0.0.2/24
	!
    }
    canvas c1
    iconcoords {498.9005708561837 325.7572176272693}
    labelcoords {480.9005708561837 314.7572176272688}
    interface-peer {eth0 n10}
    interface-peer {eth1 n8}
    interface-peer {eth2 n1}
    interface-peer {eth3 n3}
    interface-peer {eth4 n4}
    interface-peer {eth5 n6}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s2 -- set Bridge s2 fail-mode=secure
	ovs-vsctl set bridge s2 other-config:datapath-id=0000000000000002
	ovs-vsctl set bridge s2 stp_enable=true
	ip addr del 10.0.2.1 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth1 -- set Interface eth1 ofport_request=1
	## start them up so we can send/receive data
	ovs-ofctl mod-port s2 eth1 up
	ip addr del 10.0.10.2 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s2 eth2 up
	ip addr del 10.0.12.2 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s2 eth3 up
	ip addr del 10.0.14.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth4 -- set Interface eth4 ofport_request=4
	## start them up so we can send/receive data
	ovs-ofctl mod-port s2 eth4 up
	ip addr del 10.0.15.1 dev eth5
	## Add the CORE interface to the switch
	ovs-vsctl add-port s2 eth5 -- set Interface eth5 ofport_request=5
	ovs-ofctl mod-port s2 eth5 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s2 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s2 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth4
	 ip address 10.0.19.1/24
	!
	interface eth3
	 ip address 10.0.16.1/24
	!
	interface eth2
	 ip address 10.0.12.1/24
	!
	interface eth1
	 ip address 10.0.11.2/24
	!
	interface eth0
	 ip address 10.0.0.3/24
	!
    }
    canvas c1
    iconcoords {514.9370044505033 58.23224410826211}
    labelcoords {520.9370044505033 40.23224410826262}
    interface-peer {eth0 n10}
    interface-peer {eth1 n1}
    interface-peer {eth2 n2}
    interface-peer {eth3 n6}
    interface-peer {eth4 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s3 -- set Bridge s3 fail-mode=secure
	ovs-vsctl set bridge s3 other-config:datapath-id=0000000000000003
	ovs-vsctl set bridge s3 stp_enable=true
	ip addr del 10.0.11.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth1 -- set Interface eth1 ofport_request=1
	## start them up so we can send/receive data
	ovs-ofctl mod-port s3 eth1 up
	ip addr del 10.0.12.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s3 eth2 up
	ip addr del 10.0.16.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth3 -- set Interface eth3 ofport_request=3
	## start them up so we can send/receive data
	ovs-ofctl mod-port s3 eth3 up
	ip addr del 10.0.19.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s3 eth4 -- set Interface eth4 ofport_request=4
	ovs-ofctl mod-port s3 eth4 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s3 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s3 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth3
	 ip address 10.0.20.2/24
	!
	interface eth2
	 ip address 10.0.17.2/24
	!
	interface eth1
	 ip address 10.0.14.2/24
	!
	interface eth0
	 ip address 10.0.0.4/24
	!
    }
    canvas c1
    iconcoords {669.7776804010966 322.34317440530367}
    labelcoords {669.7776804010966 354.34317440530447}
    interface-peer {eth0 n10}
    interface-peer {eth1 n2}
    interface-peer {eth2 n6}
    interface-peer {eth3 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s4 -- set Bridge s4 fail-mode=secure
	ovs-vsctl set bridge s4 other-config:datapath-id=0000000000000004
	ovs-vsctl set bridge s4 stp_enable=true
	ip addr del 10.0.14.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s4 eth1 -- set Interface eth1 ofport_request=2
	ovs-ofctl mod-port s4 eth1 up
	ip addr del 10.0.17.2 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s4 eth2 -- set Interface eth2 ofport_request=3
	ovs-ofctl mod-port s4 eth2 up
	ip addr del 10.0.20.2 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s4 eth3 -- set Interface eth3 ofport_request=1
	ovs-ofctl mod-port s4 eth3 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s4 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s4 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth4
	 ip address 10.0.20.1/24
	!
	interface eth3
	 ip address 10.0.19.2/24
	!
	interface eth2
	 ip address 10.0.18.2/24
	!
	interface eth1
	 ip address 10.0.3.1/24
	!
	interface eth0
	 ip address 10.0.0.5/24
	!
    }
    canvas c1
    iconcoords {880.3004300976386 258.3948411283719}
    labelcoords {912.3004300976386 271.39484112837226}
    interface-peer {eth0 n10}
    interface-peer {eth1 n9}
    interface-peer {eth2 n6}
    interface-peer {eth3 n3}
    interface-peer {eth4 n4}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s5 -- set Bridge s5 fail-mode=secure
	ovs-vsctl set bridge s5 other-config:datapath-id=0000000000000005
	ovs-vsctl set bridge s5 stp_enable=true
	ip addr del 10.0.3.1 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s5 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s5 eth1 up
	ip addr del 10.0.18.2 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s5 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s5 eth2 up
	ip addr del 10.0.19.2 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s5 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s5 eth3 up
	ip addr del 10.0.20.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s5 eth4 -- set Interface eth4 ofport_request=4
	ovs-ofctl mod-port s5 eth4 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s5 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s5 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n6 {
    type router
    model router
    network-config {
	hostname n6
	!
	interface eth5
	 ip address 10.0.18.1/24
	!
	interface eth4
	 ip address 10.0.17.1/24
	!
	interface eth3
	 ip address 10.0.16.2/24
	!
	interface eth2
	 ip address 10.0.15.2/24
	!
	interface eth1
	 ip address 10.0.13.2/24
	!
	interface eth0
	 ip address 10.0.0.6/24
	!
    }
    canvas c1
    iconcoords {673.7952775912248 192.14647876956735}
    labelcoords {675.7952775912248 177.14647876956724}
    interface-peer {eth0 n10}
    interface-peer {eth1 n1}
    interface-peer {eth2 n2}
    interface-peer {eth3 n3}
    interface-peer {eth4 n4}
    interface-peer {eth5 n5}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s6 -- set Bridge s6 fail-mode=secure
	ovs-vsctl set bridge s6 other-config:datapath-id=0000000000000006
	ovs-vsctl set bridge s6 stp_enable=true
	ip addr del 10.0.13.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s6 eth1 up
	ip addr del 10.0.15.2 dev eth2
	## Add the CORE interface to the switch
	ovs-ofctl mod-port s6 eth2 up
	ip addr del 10.0.16.2 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s6 eth3 up
	ip addr del 10.0.17.1 dev eth4
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth4 -- set Interface eth4 ofport_request=4
	ovs-ofctl mod-port s6 eth4 up
	ip addr del 10.0.18.1 dev eth5
	## Add the CORE interface to the switch
	ovs-vsctl add-port s6 eth5 -- set Interface eth5 ofport_request=5
	ovs-ofctl mod-port s6 eth5 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s6 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s6 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n7 {
    type router
    model router
    network-config {
	hostname n7
	!
	interface eth3
	 ip address 10.0.5.1/24
	!
	interface eth2
	 ip address 10.0.4.1/24
	!
	interface eth1
	 ip address 10.0.1.2/24
	!
	interface eth0
	 ip address 10.0.0.7/24
	!
    }
    canvas c1
    iconcoords {160.0209997269991 339.72147332538464}
    labelcoords {157.0209997269991 321.72147332538464}
    interface-peer {eth0 n10}
    interface-peer {eth1 n1}
    interface-peer {eth2 n12}
    interface-peer {eth3 n11}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s7 -- set Bridge s7 fail-mode=secure
	ovs-vsctl set bridge s7 other-config:datapath-id=0000000000000007
	ovs-vsctl set bridge s7 stp_enable=true
	ip addr del 10.0.1.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s7 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s7 eth1 up
	ip addr del 10.0.4.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s7 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s7 eth2 up
	ip addr del 10.0.5.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s7 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s7 eth3 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s7 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s7 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n8 {
    type router
    model router
    network-config {
	hostname n8
	!
	interface eth3
	 ip address 10.0.7.1/24
	!
	interface eth2
	 ip address 10.0.6.1/24
	!
	interface eth1
	 ip address 10.0.2.2/24
	!
	interface eth0
	 ip address 10.0.0.8/24
	!
    }
    canvas c1
    iconcoords {519.67236468381 498.70069990196737}
    labelcoords {519.67236468381 530.7006999019666}
    interface-peer {eth0 n10}
    interface-peer {eth1 n2}
    interface-peer {eth2 n13}
    interface-peer {eth3 n14}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s8 -- set Bridge s8 fail-mode=secure
	ovs-vsctl set bridge s8 other-config:datapath-id=0000000000000008
	ovs-vsctl set bridge s8 stp_enable=true
	ip addr del 10.0.2.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s8 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s8 eth1 up
	ip addr del 10.0.6.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s8 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s8 eth2 up
	ip addr del 10.0.7.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s8 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s8 eth3 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s8 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s8 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n9 {
    type router
    model router
    network-config {
	hostname n9
	!
	interface eth3
	 ip address 10.0.9.1/24
	!
	interface eth2
	 ip address 10.0.8.1/24
	!
	interface eth1
	 ip address 10.0.3.2/24
	!
	interface eth0
	 ip address 10.0.0.9/24
	!
    }
    canvas c1
    iconcoords {851.421859664697 480.9790080482626}
    labelcoords {851.421859664697 512.9790080482619}
    interface-peer {eth0 n10}
    interface-peer {eth1 n5}
    interface-peer {eth2 n15}
    interface-peer {eth3 n16}
    custom-config {
	custom-config-id service:OvsService
	custom-command OvsService
	config {
	files=('OvsService.sh', )
	}
    }
    custom-config {
	custom-config-id service:OvsService:OvsService.sh
	custom-command OvsService.sh
	config {
	#!/bin/sh
	# auto-generated by OvsService (OvsService.py)
	## First make sure that the ovs services are up and running
	/etc/init.d/openvswitch-switch start < /dev/null
	
	## create the switch itself, set the fail mode to secure, 
	## this stops it from routing traffic without defined flows.
	## remove the -- and everything after if you want it to act as a regular switch
	ovs-vsctl add-br s9 -- set Bridge s9 fail-mode=secure
	ovs-vsctl set bridge s9 other-config:datapath-id=0000000000000009
	ovs-vsctl set bridge s9 stp_enable=true
	ip addr del 10.0.3.2 dev eth1
	## Add the CORE interface to the switch
	ovs-vsctl add-port s9 eth1 -- set Interface eth1 ofport_request=1
	ovs-ofctl mod-port s9 eth1 up
	ip addr del 10.0.8.1 dev eth2
	## Add the CORE interface to the switch
	ovs-vsctl add-port s9 eth2 -- set Interface eth2 ofport_request=2
	ovs-ofctl mod-port s9 eth2 up
	ip addr del 10.0.9.1 dev eth3
	## Add the CORE interface to the switch
	ovs-vsctl add-port s9 eth3 -- set Interface eth3 ofport_request=3
	ovs-ofctl mod-port s9 eth3 up
	
	## We assume there will be an SDN controller on the other end of this, 
	## but it will still function if there's not
	ovs-vsctl set-controller s9 tcp:10.0.0.254:6633
	##ovs-vsctl set-controller s9 tcp:192.168.56.112:6633
	}
    }
    services {OvsService}
}

node n10 {
    type lanswitch
    network-config {
	hostname n10
	!
    }
    canvas c1
    iconcoords {240.64679439056317 623.60686484845}
    labelcoords {240.64679439056317 647.6068648484497}
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n3}
    interface-peer {e3 n4}
    interface-peer {e4 n5}
    interface-peer {e5 n6}
    interface-peer {e6 n7}
    interface-peer {e7 n8}
    interface-peer {e8 n9}
    interface-peer {e9 n17}
}

node n11 {
    type router
    model PC
    network-config {
	hostname User4
	!
	interface eth0
	 mac address 00:00:00:00:00:14
	 ip address 10.0.1.4/24
	!
    }
    canvas c1
    iconcoords {129.0 598.0}
    labelcoords {118.0 644.0}
    interface-peer {eth0 n7}
}

node n12 {
    type router
    model PC
    network-config {
	hostname User1
	!
	interface eth0
	 mac address 00:00:00:00:00:11
	 ip address 10.0.1.1/24
	!
    }
    canvas c1
    iconcoords {85.0 451.0}
    labelcoords {85.0 491.0}
    interface-peer {eth0 n7}
}

node n13 {
    type router
    model PC
    network-config {
	hostname User2
	!
	interface eth0
	 mac address 00:00:00:00:00:12
	 ip address 10.0.1.2/24
	!
    }
    canvas c1
    iconcoords {444.0 680.0}
    labelcoords {442.0 721.0}
    interface-peer {eth0 n8}
}

node n14 {
    type router
    model PC
    network-config {
	hostname User3
	!
	interface eth0
	 mac address 00:00:00:00:00:15
	 ip address 10.0.1.5/24
	!
    }
    canvas c1
    iconcoords {569.0 677.0}
    labelcoords {569.0 715.0}
    interface-peer {eth0 n8}
}

node n15 {
    type router
    model host
    network-config {
	hostname Server1
	!
	interface eth0
	 mac address 00:00:00:00:00:13
	 ip address 10.0.1.3/24
	!
    }
    canvas c1
    iconcoords {775.0 662.0}
    labelcoords {775.0 704.0}
    interface-peer {eth0 n9}
    services {DefaultRoute HTTP SSH}
}

node n16 {
    type router
    model host
    network-config {
	hostname Server2
	!
	interface eth0
	 mac address 00:00:00:00:00:16
	 ip address 10.0.1.6/24
	!
    }
    canvas c1
    iconcoords {928.0 642.0}
    labelcoords {931.0 691.0}
    interface-peer {eth0 n9}
    services {DefaultRoute HTTP SSH}
}

node n17 {
    type rj45
    network-config {
	hostname enp0s9
	!
    }
    canvas c1
    iconcoords {110.0 703.0}
    labelcoords {110.0 735.0}
    interface-peer {0 n10}
}

link l1 {
    color Green
    nodes {n1 n10}
    bandwidth 0
}

link l2 {
    color Green
    nodes {n2 n10}
    bandwidth 0
}

link l3 {
    color Green
    nodes {n3 n10}
    bandwidth 0
}

link l4 {
    color Green
    nodes {n4 n10}
    bandwidth 0
}

link l5 {
    color Green
    nodes {n5 n10}
    bandwidth 0
}

link l6 {
    color Green
    nodes {n6 n10}
    bandwidth 0
}

link l7 {
    color Green
    nodes {n7 n10}
    bandwidth 0
}

link l8 {
    color Green
    nodes {n8 n10}
    bandwidth 0
}

link l9 {
    color Green
    nodes {n9 n10}
    bandwidth 0
}

link l10 {
    nodes {n1 n7}
    bandwidth 0
}

link l11 {
    nodes {n2 n8}
    bandwidth 0
}

link l12 {
    nodes {n5 n9}
    bandwidth 0
}

link l13 {
    color Magenta
    nodes {n12 n7}
    bandwidth 0
}

link l14 {
    color Magenta
    nodes {n7 n11}
    bandwidth 0
}

link l15 {
    color Magenta
    nodes {n13 n8}
    bandwidth 0
}

link l16 {
    color Magenta
    nodes {n8 n14}
    bandwidth 0
}

link l17 {
    color Magenta
    nodes {n9 n15}
    bandwidth 0
}

link l18 {
    color Magenta
    nodes {n9 n16}
    bandwidth 0
}

link l19 {
    nodes {n1 n2}
    bandwidth 0
}

link l20 {
    nodes {n1 n3}
    bandwidth 0
}

link l21 {
    nodes {n3 n2}
    bandwidth 0
}

link l22 {
    nodes {n1 n6}
    bandwidth 0
}

link l23 {
    nodes {n2 n4}
    bandwidth 0
}

link l24 {
    nodes {n2 n6}
    bandwidth 0
}

link l25 {
    nodes {n3 n6}
    bandwidth 0
}

link l26 {
    nodes {n6 n4}
    bandwidth 0
}

link l27 {
    nodes {n6 n5}
    bandwidth 0
}

link l28 {
    nodes {n3 n5}
    bandwidth 0
}

link l29 {
    nodes {n5 n4}
    bandwidth 0
}

link l30 {
    nodes {n17 n10}
}

annotation a1 {
    iconcoords {19.0 369.0 128.0 492.0}
    type rectangle
    label {Slice 300 http}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0c0ff
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {533 582 675 715}
    type rectangle
    label {Slice 300 ssh}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {877 550 991 702}
    type rectangle
    label {Slice 300}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    iconcoords {57 499 181 652}
    type rectangle
    label {Slice 400 ssh}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #8ee4b9
    width 0
    border black
    rad 25
    canvas c1
}

annotation a5 {
    iconcoords {345.0 600.0 486.0 724.0}
    type rectangle
    label {Slice 400 http}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #8ee4b9
    width 0
    border black
    rad 25
    canvas c1
}

annotation a6 {
    iconcoords {697 569 839 725}
    type rectangle
    label {Slice 400}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #8ee4b9
    width 0
    border black
    rad 25
    canvas c1
}

annotation a7 {
    iconcoords {571.0 623.0}
    type text
    label {slice 700}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a8 {
    type text
    iconcoords {631.0 635.0}
    label {}
    canvas c1
}

annotation a9 {
    iconcoords {363.0 655.0}
    type text
    label {slice 600}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a10 {
    iconcoords {26.0 413.0}
    type text
    label {slice 600}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a11 {
    iconcoords {101.0 463.0}
    type text
    label {slice 600}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a12 {
    iconcoords {68.0 545.0}
    type text
    label {slice 700}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state
BRIFNAME=$(find /sys/devices/virtual/net -name 'enp0s9' | awk -F '[/:]' '{print $6}')
ip addr add 10.0.0.254/24 dev $BRIFNAME
}

option global {
    interface_names yes
    ip_addresses no
    ipv6_addresses no
    node_labels yes
    link_labels no
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

